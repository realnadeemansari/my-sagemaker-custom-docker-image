#!/usr/bin python3
# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function
import json
import os
import pickle
import sys
import traceback
import pandas as pd
import xgboost as xgb
from sklearn.preprocessing import LabelEncoder

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

def preprocess(df, encoder):
    train = df[['Status', 'Levels', 'Rooms', 'Materials', 'Engagement', 'source']]
    train_df = pd.get_dummies(train)
    train_df = train_df.rename(columns = {'Status_no longer leaking, wet <1 day': 'Status_no longer leaking, wet less than 1 day',
                                     'Status_no longer leaking, wet >1 day': 'Status_no longer leaking, wet more than 1 day'})
    train_df.columns=train_df.columns.str.replace(r'[^0-9a-zA-Z ]', ' ', regex=True)


def train():
    print("Starting the training.")
    try:
        with open(param_path, 'r') as tc:
            training_params = json.load(tc)
        
        # Take the set of files and read them all into a single pandas dataframe
        input_files = [os.path.join(training_path, file) for file in os.listdir(training_path)]
        if len(input_files) == 0:
            raise ValueError(("There are no files in {}.\n" + 
                                'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        
        # Reading the training data.
        raw_data = [ pd.read_csv(file) for file in input_files if file.endswith(".csv")]
        
        # Prepare the dataset.
        train_data = pd.concat(raw_data)
        train = train_data[['Status', 'Levels', 'Rooms', 'Materials', 'Engagement', 'source']]
        train_df = pd.get_dummies(train)
        train_df = train_df.rename(columns = {'Status_no longer leaking, wet <1 day': 'Status_no longer leaking, wet less than 1 day',
                                        'Status_no longer leaking, wet >1 day': 'Status_no longer leaking, wet more than 1 day'})
        train_df.columns=train_df.columns.str.replace(r'[^0-9a-zA-Z ]', ' ', regex=True)
        encoder = LabelEncoder()
        y_train = encoder.fit_transform(train_data[['labels']])
        dtrain = xgb.DMatrix(data=train_df, label=y_train)

        # Training the model.
        model = xgb.train(training_params, dtrain)

        # Save the model
        with open(os.path.join(model_path, "xgb-model1.pkl"), "wb") as out:
            pickle.dump(model, out)
        with open(os.path.join(model_path, "xgb-encoder1.pkl"), "wb") as out:
            pickle.dump(encoder, out)

        print("Training complete.")

    except Exception as e:
            # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == "__main__":
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)